Shimaenaga
親切なエラーメッセージ
強い型付け
静的型付け

- 例 -
loop 5{
    writeln@Io(#counter)   
}

inp: string
n: integer
loop {
    if (#counter > 10){
        break
    }
    inp <- input@Io("num: ")

    if (isDigit@String(inp)){
        toInt@String -> n
    }
    writeln@Io(n + 10)
}

s: string <- ""
loop 100{
    s <- ""

    if (#counter % 3 == 0){
        s += "Fizz"
    }
    if (#counter % 5 == 0){
        s += "Buzz"
    }
    if (s == ""){
        writeln@Io(#counter)
    }else{
        writeln@Io(s)
    }
}

loop 100{
    switch {
        case (#counter % 15 == 0){
            writeln("FizzBuzz")
        }
        case (#counter % 3 == 0){
            writeln("Fizz")
        }
        case (#counter % 5 == 0){
            writeln("Buzz")
        }
        else{
            writeln(#counter)
        }
    }
}


-*- 構文 -*-

- コメント -
;comment

- 繰り返し -
loop {
    ~
}

breakされるまで無限ループする

loop N{
    ~
}

N回繰り返す。#counterが1からカウントアップされていく。

- 条件分岐 -
if (c1){
    ~
}elif (c2){
    ~
}else{
    ~
}

if - [elif...] - [else]となるようにする。条件部分は()に入れる。

switch {
    case (c1){
        ~
    }
    case (c2){
        ~
    }
    else{
        ~
    }
    finally{
        ~
    }
}

caseはひとつ以上、else、finallyは任意。条件は()に入れる。
caseについては条件部分が真の時、elseはどのcaseにもマッチしなかった時に実行される。
finallyは必ず実行される。

switch value{
    case v1, v2:
        ~
    case v3:
        ~
    else:
        ~
    finally:
        ~
}

switchの後に値をおき、その値にマッチするcaseが実行される。

- 変数定義 -
var: type
var: type <- value
value -> var: type
変数名、コロン、型の順で並べ、変数の方を指定する。
また、同時に代入することもできる。
同じ変数名での再定義は禁止。

- 代入 -
代入は<-または、->で行う。
矢印の先に変数を置き、そこに値を代入する。

- 関数定義 -
func name(arg1: type, arg2: type, ...)(ret1: type, ret2: type, ...){
    ~
    return ret1, ret2, ...
}

引数、返り値はいくらでも指定可能。

- 関数実行 -
f(arg1, arg2, ...)
ret1, ret2, ... <- f(arg1, arg2, ...)

定義時の返り値の数と実行時に受け取る数が違う場合、受け取れなかった分は無視される。
受け取る数が多かった場合には例外。

f@Library(arg1, arg2, ...)

ライブラリの中に定義された関数を実行する場合、@をつけ、その後にライブラリ名を指定する。

- import -
import Library

ライブラリ中の値や関数を使う場合、import文によってライブラリの値をインポートする。

- ライブラリ -
ShimaenagaまたはYokoshimaenagaで書く

Math
Io
Random
Time

- 型 -
integer
var: integer

float
var: float

string
var: string

list
var: list[integer]

queue
var: queue[integer]

stack
var: stack[integer]

map?
var: map[integer: string]

bool
var: bool

配列系のインデックスは1から

